import { SelectionResult } from "./selection-result"

type function CompleteSelector = (T) => ^{
	for (Key in keyof T) {
		return {
			key: Key,
			value: ^{
				if (Key extends Scalar) {
					return true
				} else if(T[Key] extends Array<infer U>) {
					return CompleteSelector<U>
				} else {
					return CompleteSelector<T[Key]>
				}
			}
		}
	}
}

type function Selector = (S, T) => ^{
	if (CompleteSelector<T> extends S) {
		return & [
			S,
			{
				__resultType: SelectionResult<S, T>
			}
		]
	} else {
		return never
	}
}